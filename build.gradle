/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
    // https://github.com/SpacialCircumstances/gradle-cucumber-reporting
    id "com.github.spacialcircumstances.gradle-cucumber-reporting" version "0.1.24"
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.7'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:2.6.7'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.7'
    implementation 'com.h2database:h2:1.4.200'
    implementation 'org.springframework.boot:spring-boot-devtools:2.6.7'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.7'
    testImplementation 'io.cucumber:cucumber-spring:7.3.2'
    testImplementation 'io.cucumber:cucumber-java:7.3.2'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.3.2'
    testImplementation 'org.junit.platform:junit-platform-suite:1.8.2'

    testImplementation("org.seleniumhq.selenium:selenium-java:latest.release") {
        because("we want to use Selenium to remote control browsers")
    }
    testImplementation("io.github.bonigarcia:webdrivermanager:latest.release") {
        because("we want someone else to manage webdrivers")
    }
}

group = 'biz.marius'
version = '1.0.0-SNAPSHOT'
description = 'Examples: Spring Transactions - Java - Junit 5'
java.sourceCompatibility = JavaVersion.VERSION_17

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

tasks.test {
    useJUnitPlatform()
    // REQUIRED: Tell Gradle to use the JUnit 5 platform to execute tests
    // see https://docs.gradle.org/current/userguide/java_testing.html#using_junit5
    useJUnitPlatform {
        // OPTIONAL: Exclude all tests (examples/scenarios) annotated with @disabled by default
        excludeTags("disabled")
        // OPTIONAL: Include only specified tags using JUnit5 tag expressions
        if (project.hasProperty("includeTags")) {
            includeTags(project.property("includeTags") as String)
        }
    }
    // OPTIONAL: Ignore test failures so that build pipelines won't get blocked by failing examples/scenarios
    ignoreFailures = true
    // OPTIONAL: Copy all system properties from the command line (-D...) to the test environment
    systemProperties(project.gradle.startParameter.systemPropertiesArgs)
    // OPTIONAL: Enable parallel test execution
    systemProperty("cucumber.execution.parallel.enabled", true)
    // OPTIONAL: Set parallel execution strategy (defaults to dynamic)
    systemProperty("cucumber.execution.parallel.config.strategy", "fixed")
    // OPTIONAL: Set the fixed number of parallel test executions. Only works for the "fixed" strategy defined above
    systemProperty("cucumber.execution.parallel.config.fixed.parallelism", 4)
    // OPTIONAL: Enable Cucumber plugins, enable/disable as desired
    systemProperty("cucumber.plugin", "json:build/reports/cucumber.json, message:build/reports/cucumber.ndjson, timeline:build/reports/timeline, html:build/reports/cucumber.html")
    // OPTIONAL: Improve readability of test names in reports
    systemProperty("cucumber.junit-platform.naming-strategy", "long")
    // OPTIONAL: Don't show Cucumber ads
    systemProperty("cucumber.publish.quiet", "true")
    // OPTIONAL: Force test execution even if they are up-to-date according to Gradle
    outputs.upToDateWhen { false }
}


task cucumberCli() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = [
                    '--plugin', 'pretty',
                    '--plugin', 'html:build/cucumber-report.html',
                    '--plugin', 'message:build/results.ndjson',
                    '--glue', 'io.cucumber.examples.spring.application',
                    'src/test/resources']
        }
    }
}

cucumberReports {
    outputDir = file('build/generated/html')
    buildId = '0'
    reports = files('build/reports/cucumber.json')
}


// OPTIONAL: Make sure that we are always using the ALL distro of Gradle for better IDE integration
tasks.withType(Wrapper) {
    distributionType = Wrapper.DistributionType.ALL
}
